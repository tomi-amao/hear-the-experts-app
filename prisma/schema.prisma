// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model ExeprtSuggestion {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  title      String
  categories String[]
}

model User {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  email      String       @unique
  password   String
  profile    Profile
  active     Boolean?
  posts      Posts[]
  postLikes  PostLikes[]
  favourites Favourites[]
}

model Posts {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  content    String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  status     PostStatus
  type       PostType?
  author     User         @relation(fields: [authorId],references: [id], onDelete:Cascade)
  authorId   String       @db.ObjectId
  postLikes  PostLikes[]
  favourites Favourites[]
  tags       String[]
}

// type Tags {
//   tags String[]
// }

model PostLikes {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  postId   String   @db.ObjectId
  post     Posts    @relation(fields: [postId], references: [id])
  likeSent DateTime @default(now())
  userId   String   @db.ObjectId
  user     User     @relation(fields: [userId], references: [id])
}

model Favourites {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  postId       String   @db.ObjectId
  post         Posts    @relation(fields: [postId], references: [id])
  favouritedAt DateTime @default(now())
  User         User?    @relation(fields: [userId], references: [id])
  userId       String?  @db.ObjectId
}

type Profile {
  firstName      String
  lastName       String
  username       String?
  profilePicture String?
  role           String?
  type           UserType?
}

enum UserType {
  EXPERT
  SENIOR
  null
}
enum PostType {
  problem
  suggestion
}

enum PostStatus {
  UNRESOLVED
  PENDING
  RESOLVED
  CLOSED
}
